- id: com.example.php.core.md5
  pattern: md5(_)
  message: |
    この関数は、セキュリティの観点から推奨されていません。
    https://www.php.net/manual/ja/function.md5.php
    より強力なハッシュアルゴリズムを利用しましょう。
    https://www.php.net/manual/ja/function.password-hash.php
  test:
    fail:
      - md5($str)
    pass:
      - password_hash($str, PASSWORD_DEFAULT)
- id: com.example.php.core.sha1
  pattern: sha1(_)
  message: |
    この関数は、セキュリティの観点から推奨されていません。
    https://www.php.net/manual/ja/function.sha1.php
    より強力なハッシュアルゴリズムを利用しましょう。
    https://www.php.net/manual/ja/function.password-hash.php
  test:
    fail:
      - sha1($str)
    pass:
      - password_hash($str, PASSWORD_DEFAULT)
- id: com.example.php.core.setcookie
  pattern: 
    - setcookie(_)
    - setcookie(_, _)
    - setcookie(_, _, _)
    - setcookie(_, _, _, _)
    - setcookie(_, _, _, _, _)
  message: |
    Cookieを生成する際は、セキュリティリスクを減らすために必要に応じて下記の引数を指定してください。
    ・サービスがHTTPSで提供されている
    →第６引数に true を指定する
    ・JavaScriptから参照されることがない
    →第７引数に true を指定する
    https://www.php.net/manual/ja/function.setcookie.php
  test:
    fail:
      - setcookie($name, $value)
      - setcookie($name, $value, time()+3600)
      - setcookie($name, $value, time()+3600, 'example.com')
      - setcookie($name, $value, time()+3600, 'example.com', '')
    pass:
      - setcookie($name, $value, time()+3600, 'example.com', '', false, true)
      - setcookie($name, $value, time()+3600, 'example.com', '', true, true)
- id: com.example.php.core.uniqid
  pattern: uniqid()
  message: |
    より精度を上げるため、第二引数(true)を指定することをお勧めします。
    https://www.php.net/manual/ja/function.uniqid.php
  test:
    fail:
      - uniqid()
    pass:
      - uniqid('', true)
- id: com.example.php.ver72.create_function
  pattern: create_function(...)
  message: |
    この関数は、PHP 7.2 で非推奨になりました。
    https://www.php.net/manual/ja/function.create-function.php
    無名関数を利用することをお勧めします。
    https://www.php.net/manual/ja/functions.anonymous.php
  fail:
    - create_function('$var', 'return "Hello,{$var}";');
  pass:
    - function ($var) { return "Hello,{$var}"; }
  glob:
    - "*.php"
    - "**/*.php"
- id: com.example.php.ver72.parse_str
  pattern: parse_str(_)
  message: |
    PHP 7.2 から第二引数を省略することが非推奨となりました。
    セキュリティリスクとなるため、指定してください。
    https://www.php.net/manual/ja/function.parse-str.php
  fail:
    - parse_str($str)
  pass:
    - parse_str($str, $output)
- id: com.example.php.ver72.each
  pattern: each(_)
  message: |
    この関数は、PHP 7.2 で非推奨となりました。
    foreach を利用してください。
    https://www.php.net/manual/ja/control-structures.foreach.php
  fail:
    - each($arr)
  pass:
    - foreach($arr as $var)
- id: com.example.php.ver72.gmp_random
  pattern: gmp_random(_)
  message: |
    この関数は、PHP 7.2 で非推奨となりました。
    gmp_random_range 関数を利用してください。
    https://www.php.net/manual/ja/function.gmp-random-range.php
  fail:
    - gmp_random(1)
  pass:
    - gmp_random_range(0, 100)
- id: com.example.php.ver73.image2wbmp
  pattern: image2wbmp(...)
  message: |
    この関数は、 PHP 7.3 で非推奨となりました。
    同等の機能を持つ imagewbmp を使用しましょう。
    https://wiki.php.net/rfc/image2wbmp
  fail:
    - image2wbmp($image)
  pass:
    - imagewbmp($image)
# phinerで設定ができなかったカスタムルール
# 下記のルールはpassパターン（[]）もこの条件にマッチしてしまうため、正常に動作しません
# - id: com.example.php.ver54.array
#   pattern: "array(...)"
#   message: |
#     PHP 5.4 以降、 配列は [] で定義できます。 
#     可読性を上げるため、活用しましょう。
#     https://www.php.net/manual/ja/language.types.array.php
#   fail:
#     - array('foo')
#   pass:
#     - "['foo']"
# 制御構文、関数以外のルールが作成できないため、null合体演算子のチェックなどが行なえません
# - id: com.example.php.ver70.elvis_operator
#     pattern:
#         regexp: 'isset\((\S+)\) *\? *\1 * : *(["''])\S+\2'
#     message: |
#       PHP 7.0 以降、 エルビス演算子 の代わりに null合体演算子 を利用できます。 
#       可読性を上げるため、活用しましょう。
#       https://ja.wikipedia.org/wiki/Null%E5%90%88%E4%BD%93%E6%BC%94%E7%AE%97%E5%AD%90#PHP
#     fail:
#       - "isset($var) ? $var : 'var'"
#     pass:
#       - $var ?? 'var'